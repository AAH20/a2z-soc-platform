apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: a2z-soc-production
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'a2z-soc-production'
        region: 'us-east-1'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - alertmanager:9093
    
    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']
    
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
    
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
    
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name
    
    - job_name: 'a2z-soc-api'
      static_configs:
      - targets: ['a2z-soc-api-service:8080']
      metrics_path: /metrics
      scrape_interval: 5s
      scrape_timeout: 3s
    
    - job_name: 'a2z-soc-business-metrics'
      static_configs:
      - targets: ['a2z-soc-api-service:8080']
      metrics_path: /metrics/business
      scrape_interval: 30s
    
    - job_name: 'postgresql'
      static_configs:
      - targets: ['postgres-exporter:9187']
      scrape_interval: 30s
    
    - job_name: 'redis'
      static_configs:
      - targets: ['redis-exporter:9121']
      scrape_interval: 30s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: a2z-soc-production
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'smtp.gmail.com:587'
      smtp_from: 'alerts@a2zsoc.com'
      smtp_auth_username: 'alerts@a2zsoc.com'
      smtp_auth_password: 'your-app-password'
    
    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          severity: warning
        receiver: 'warning-alerts'
      - match:
          team: security
        receiver: 'security-team'
      - match:
          team: platform
        receiver: 'platform-team'
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://a2z-soc-api-service/api/webhooks/alerts'
        send_resolved: true
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'oncall@a2zsoc.com'
        subject: '🚨 CRITICAL: {{ .GroupLabels.alertname }} - {{ .GroupLabels.cluster }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
        channel: '#critical-alerts'
        title: '🚨 Critical Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    - name: 'warning-alerts'
      email_configs:
      - to: 'alerts@a2zsoc.com'
        subject: '⚠️ WARNING: {{ .GroupLabels.alertname }} - {{ .GroupLabels.cluster }}'
    
    - name: 'security-team'
      email_configs:
      - to: 'security@a2zsoc.com'
        subject: '🛡️ Security Alert: {{ .GroupLabels.alertname }}'
      pagerduty_configs:
      - routing_key: 'YOUR_PAGERDUTY_ROUTING_KEY'
        description: '{{ .GroupLabels.alertname }}: {{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
    
    - name: 'platform-team'
      email_configs:
      - to: 'platform@a2zsoc.com'
        subject: '🔧 Platform Alert: {{ .GroupLabels.alertname }}'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: a2z-soc-production
data:
  a2z-soc-alerts.yml: |
    groups:
    - name: a2z-soc-platform
      rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
        for: 5m
        labels:
          severity: critical
          team: platform
        annotations:
          summary: "High error rate detected on {{ $labels.instance }}"
          description: "Error rate is {{ $value | humanizePercentage }} for 5 minutes"
      
      - alert: HighResponseTime
        expr: histogram_quantile(0.99, rate(http_request_duration_seconds_bucket[5m])) > 0.1
        for: 2m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High response time on {{ $labels.instance }}"
          description: "99th percentile response time is {{ $value }}s"
      
      - alert: DatabaseConnectionHigh
        expr: pg_stat_activity_count > 80
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High database connections"
          description: "Database has {{ $value }} active connections"
      
      - alert: MemoryUsageHigh
        expr: container_memory_usage_bytes / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: critical
          team: platform
        annotations:
          summary: "High memory usage on {{ $labels.pod }}"
          description: "Memory usage is {{ $value | humanizePercentage }}"
      
      - alert: PodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: critical
          team: platform
        annotations:
          summary: "Pod {{ $labels.pod }} is crash looping"
          description: "Pod has restarted {{ $value }} times in the last 15 minutes"
    
    - name: a2z-soc-business
      rules:
      - alert: TenantSLABreach
        expr: histogram_quantile(0.95, rate(tenant_request_duration_seconds_bucket[5m])) > 0.1
        for: 2m
        labels:
          severity: warning
          team: customer-success
        annotations:
          summary: "SLA breach for tenant {{ $labels.tenant_id }}"
          description: "95th percentile response time is {{ $value }}s for tenant {{ $labels.tenant_id }}"
      
      - alert: HighTenantChurnRate
        expr: increase(tenant_churn_total[1h]) > 5
        for: 0s
        labels:
          severity: warning
          team: customer-success
        annotations:
          summary: "High tenant churn rate detected"
          description: "{{ $value }} tenants churned in the last hour"
      
      - alert: SecurityThreatVolumeHigh
        expr: increase(security_threats_detected_total[1m]) > 1000
        for: 0s
        labels:
          severity: critical
          team: security
        annotations:
          summary: "High volume of security threats detected"
          description: "{{ $value }} threats detected in the last minute"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: a2z-soc-production
  labels:
    app: prometheus
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        component: monitoring
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: http
        resources:
          requests:
            cpu: 1000m
            memory: 4Gi
          limits:
            cpu: 2000m
            memory: 8Gi
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: rules
          mountPath: /etc/prometheus/rules
        - name: storage
          mountPath: /prometheus
      volumes:
      - name: config
        configMap:
          name: prometheus-config
      - name: rules
        configMap:
          name: prometheus-rules
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-storage
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: a2z-soc-production
  labels:
    app: prometheus
    component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: http
  selector:
    app: prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: a2z-soc-production
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
  storageClassName: gp3 