apiVersion: apps/v1
kind: Deployment
metadata:
  name: a2z-soc-frontend-deployment
  namespace: a2z-soc-production
  labels:
    app: a2z-soc-frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: a2z-soc-frontend
  template:
    metadata:
      labels:
        app: a2z-soc-frontend
        tier: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      imagePullSecrets:
      - name: registry-credentials
      containers:
      - name: a2z-soc-frontend
        image: registry.a2z-soc.com/a2z-soc-frontend:latest
        ports:
        - containerPort: 80
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: a2z-soc-config
              key: NODE_ENV
        - name: REACT_APP_API_URL
          value: "https://api.a2z-soc.com/api"
        - name: REACT_APP_WEBSOCKET_URL
          value: "wss://api.a2z-soc.com/ws"
        - name: REACT_APP_VERSION
          value: "2.0.0"
        - name: REACT_APP_ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-logs
          mountPath: /var/log/nginx
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-logs
        emptyDir: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
---
apiVersion: v1
kind: Service
metadata:
  name: a2z-soc-frontend-service
  namespace: a2z-soc-production
  labels:
    app: a2z-soc-frontend
    tier: frontend
spec:
  selector:
    app: a2z-soc-frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: a2z-soc-frontend-hpa
  namespace: a2z-soc-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: a2z-soc-frontend-deployment
  minReplicas: 2
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 15
      selectPolicy: Max
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: a2z-soc-production
data:
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;
        
        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            try_files $uri =404;
        }
        
        # Main application
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint for Prometheus
        location /metrics {
            stub_status on;
            access_log off;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
        }
    } 